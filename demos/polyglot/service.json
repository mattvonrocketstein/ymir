//
// service.json for the `demo` service
//
//  Complete documentation for the file schema is here:
//   http://mattvonrocketstein.github.io/ymir/pages/service-description.html
//
{

    // Display extra debugging information
    "ymir_debug": true,

    // Sets namespace for this service.
    // This is used in tagging for AWS-based services,
    // and these variables are often useful for templating.
    "org_name": "OrgName",
    "app_name": "AppName",
    "env_name": "EnvName",
    "service_name": "ServiceName",

    "name" : "ymir-demo",
    "service_description": "Service description goes here",


    // Sets the AMI for this service.  The default is ubuntu 14.04,
    // amd64 ebs us-east-1.  Other potentially useful hints follow:
    //
    // ami-3cf8b154: PV (only suitable for t1.micro)
    // ami-0021766a: 14.04 HVM:ebs (t2.*, etc)
    "ami" : "ami-0021766a",

    // Sets the AWS instance type for this service make sure
    // AMI above matches the instance type you are asking for
    "instance_type"   : "t2.micro",

    // Sets the username for this service.
    // This is used for ssh, so make sure this matches the
    // AMI you have chosen.  Ubuntu-based AMIs use `ubuntu`
    // whereas CentOS (and elasticbeanstalk) will use `ec2-user`
    "username" : "ubuntu",

    // The location of the pem file for this service.
    // This will be used for ssh connections with the service,
    // and if it is not correct then no remote commands can be executed.
    "pem" : "~/.ssh/{{app_name}}.pem",

    // Allows sane iteration using rubyish `each` inside puppet files
    'puppet_parser': 'future',

    // Sets up the AWS key_name for this service.
    // By default, the value for the "app_name" field
    // in this file will be used.  You can find the
    // keys for your AWS account at the console here**
    // **: https://console.aws.amazon.com/iam/home#encryptionKeys
    "key_name" : "{{app_name}}",

    // A list of instructions that will be executed during the `setup` operation.
    // See also: mattvonrocketstein.github.io/ymir/
    "setup_list" : [
        ],

    // A list of names for the AWS security groups this service will belong
    // to. The existence of these security groups will be confirmed when
    // `ymir validate` is run from the command line.
    "security_groups" : ['your_sg_name'],

    // The `provision_list` field provides a list of  instructions to
    // execute during the provisioning of this service.  By the time
    // provisioning happens, any puppet or ansible dependencies (mentioned
    // in puppet/metadata.json and ansible/requirements.yml, respectively)
    // are guaranteed to be installed as long as the `setup` operation has
    // already run.
    //
    // Note that instructions in the following list may use {{variables}}
    // mentioned elsewhere in this file, subject to the standard
    // template-scoping rules.  File locations are relative to the
    // service-root, i.e. the directory this file is in.
    "provision_list" : [
        "ansible_playbook://ansible/play.yml",
        "puppet://puppet/demo_service.pp",
    ],

    // Health checks to execute against this service when the `check`
    // operation is used.  Reflective-templating (with values in this config)
    // is allowed and encouraged, because anything IP-based will be useless
    // after executing terminate/create operations.
    "health_checks": {
        "homepage" :
        ['http_200',
         'http://{{host}}'],
    },

    // Schema-free section for misc. site configuration.
    // Useful for template-variables that can be passed on to the
    // puppet FACTer, the ansible environment, or used to configure
    // application particulars.
    'service_defaults' : {
        "ansible_variable": "ANSIBLE_VARIABLE_VALUE",
        "puppet_variable": "PUPPET_VARIABLE_VALUE",
    }
}
