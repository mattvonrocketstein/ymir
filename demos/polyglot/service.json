//
// service.json for the `polyglot` demo service
//
//  Complete documentation for the file schema is here:
//   http://mattvonrocketstein.github.io/ymir/pages/service-description.html
//
{

    // Whether ymir should display extra debugging information.
    // NB: This parameter also controls puppet and ansible debug levels
    "ymir_debug": true,

    // Sets namespace for this service.
    // This is used in tagging for AWS-based services,
    // and these variables are often useful for templating.
    "org_name": "ymir",
    "app_name": "ymir",
    "env_name": "dev",
    "service_name": "polyglot",

    "name" : "ymir-polyglot-aws-demo",
    "service_description": "Service description goes here",


    // Sets the AMI for this service.  The default is ubuntu 14.04,
    // amd64 ebs us-east-1.  Other potentially useful hints follow:
    //
    // ami-3cf8b154: PV (only suitable for t1.micro)
    // ami-0021766a: 14.04 HVM:ebs (t2.*, etc)
    "ami" : "ami-0021766a",

    // Sets the AWS instance type for this service make sure
    // AMI above matches the instance type you are asking for
    "instance_type"   : "t2.micro",

    // Sets the username for this service.
    // This is used for ssh, so make sure this matches the
    // AMI you have chosen.  Ubuntu-based AMIs use `ubuntu`
    // whereas CentOS (and elasticbeanstalk) will use `ec2-user`
    "username" : "ubuntu",

    // The location of the pem file for this service.
    // This will be used for ssh connections with the service,
    // and if it is not correct then no remote commands can be executed.
    "pem" : "~/.ssh/your_key_file.pem",

    // Whether ymir should build puppet on the remote side.
    // Puppet-builds only occur during the `setup` operation, and
    // are skipped if a good version of puppet is found to already exist
    // on the remote side.  When this key is not found in this configuration,
    // it defaults to true.
    "ymir_build_puppet": true,

    // Set the puppet parser that will be used.  Currently the only
    // valid value here is `future`, which allows for sane iteration
    // using rubyish `each` inside puppet files.
    'puppet_parser': 'future',

    // Sets up the AWS key_name for this service.
    // By default, the value for the "app_name" field
    // in this file will be used.  You can find the
    // names of the keys using `ymir list -k`, or by visiting
    // your AWS account at the web console here:
    //   https://console.aws.amazon.com/iam/home#encryptionKeys
    "key_name" : "aws_key_name",

    // A list of instructions that will be executed during the `setup` operation.
    // See also: mattvonrocketstein.github.io/ymir/
    "setup_list" : [
        ],

    // A list of names for the AWS security groups this service will belong
    // to. The existence of these security groups will be confirmed when
    // `ymir validate` is run from the command line.
    "security_groups" : ['default'],

    // The `provision_list` field provides a list of  instructions to
    // execute during the provisioning of this service.  By the time
    // provisioning happens, any puppet or ansible dependencies (mentioned
    // in puppet/metadata.json and ansible/requirements.yml, respectively)
    // are guaranteed to be installed as long as the `setup` operation has
    // already run.
    //
    // Note that instructions in the following list may use {{variables}}
    // mentioned elsewhere in this file, subject to the standard
    // template-scoping rules.  File locations are relative to the
    // service-root, i.e. the directory this file is in.
    "provision_list" : [
        "ansible_playbook://ansible/play.yml",
        "puppet://puppet/polyglot.pp",
    ],

    // Health checks to execute against this service when the `check`
    // operation is used.  Reflective-templating (with values in this config)
    // is allowed and encouraged, because anything IP-based will be useless
    // after executing terminate/create operations.
    "health_checks": {
        "ansible_file_created" :
          ['file-exists', '/tmp/ansible_tmp_file'],
        "puppet_file_created":
          ['file-exists', '/tmp/puppet_tmp_file'],
        "motd_tagged_with_ansible_var":
          ['file-contains', '/etc/motd,{{ansible_variable}}'],
        "motd_tagged_with_puppet_var":
          ['file-contains', '/etc/motd,{{puppet_variable}}'],
        "nginx running":
          ['testinfra', 'Service("nginx").is_running'],
    },

    // Schema-free section for misc. site configuration.
    // Useful for template-variables that can be passed on to the
    // puppet FACTer, the ansible environment, or used to configure
    // application particulars.
    'service_defaults' : {
        "ansible_variable": "ANSIBLE_VARIABLE_VALUE",
        "puppet_variable": "PUPPET_VARIABLE_VALUE",
    }
}
